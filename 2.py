import telebot
from telebot import types
import datetime
import random
import string
import threading
import time
import json
import os

bot = telebot.TeleBot("8229695321:AAGRKvTLiSYeyL80QcQrVBl56h2H5anTxGk")

# –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USERNAMES = ["@sevecid", "@officialamnesia"]
ADMIN_IDS = []  # –ó–¥–µ—Å—å –±—É–¥—É—Ç ID –∞–¥–º–∏–Ω–æ–≤ (–∑–∞–ø–æ–ª–Ω—è—Ç—Å—è —á–µ—Ä–µ–∑ /setupap)

# –¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
PRICES = {
    "1_day": 1.0,   # 1$
    "7_days": 3.5,
    "1_month": 7.5,
    "forever": 12
}

# –¢–∏–ø—ã –∂–∞–ª–æ–± –¥–ª—è —Å–Ω–æ—Å–∞
COMPLAINT_TYPES = {
    "personal_info": "–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "pornography": "–ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è",
    "illegal_goods": "–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
    "violence": "–ù–∞—Å–∏–ª–∏–µ"
}

# –í—Ä–µ–º–µ–Ω–Ω–∞—è "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é –ë–î)
users = {}
payments = {}
complaint_requests = {}
admin_panel_data = {"payment_screenshots": {}}

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã
SCREENSHOTS_DIR = "payment_screenshots"
if not os.path.exists(SCREENSHOTS_DIR):
    os.makedirs(SCREENSHOTS_DIR)

class User:
    def __init__(self, user_id):
        self.id = user_id
        self.balance = 0
        self.subscription = None
        self.used_trial = False
        self.referral_code = self.generate_referral_code()
        self.referred_by = None
        self.referrals = 0
        self.earned_from_refs = 0
        self.pending_subscription_check = False
        self.username = None

    def generate_referral_code(self):
        return f"REF{self.id}"

    def has_active_subscription(self):
        return self.subscription and self.subscription > datetime.datetime.now()

    def get_referral_link(self, bot_username):
        return f"https://t.me/{bot_username}?start={self.referral_code}"

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.message_handler(commands=['setupap'])
def setup_admin_panel(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ username
    user_profile = bot.get_chat(user_id)
    username = user_profile.username
    
    if username and f"@{username}" in ADMIN_USERNAMES:
        # –í—ã–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–æ 2088 –≥–æ–¥–∞
        if user_id not in users:
            users[user_id] = User(user_id)
        
        users[user_id].subscription = datetime.datetime(2088, 12, 31)
        users[user_id].balance = 9999  # –ë–æ–ª—å—à–æ–π –±–∞–ª–∞–Ω—Å
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        if user_id not in ADMIN_IDS:
            ADMIN_IDS.append(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        markup = types.InlineKeyboardMarkup()
        view_payments_btn = types.InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫–∏", callback_data="admin_view_payments")
        grant_sub_btn = types.InlineKeyboardButton("üéÅ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_grant_subscription")
        stats_btn = types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        markup.add(view_payments_btn)
        markup.add(grant_sub_btn)
        markup.add(stats_btn)
        
        bot.send_message(
            message.chat.id,
            "‚úÖ <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            "–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ 31.12.2088\n"
            "–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω",
            parse_mode='HTML',
            reply_markup=markup
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    args = message.text.split()
    
    # –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_text = f"""
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!</b> üåü

üöÄ <b>JointBot</b> - —Å–∞–º—ã–π –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ Telegram

‚ö° <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Å–Ω–æ—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–±
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–∞—Ä—É—à–µ–Ω–∏–π

üíé <b>–ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ —Å–Ω–æ—Å–∞</b> - –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã!
    """
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(message.chat.id, welcome_text, parse_mode='HTML')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(args) > 1:
        ref_code = args[1]
        # –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
        for uid, user in users.items():
            if user.referral_code == ref_code and uid != user_id:
                if user_id not in users:
                    users[user_id] = User(user_id)
                users[user_id].referred_by = uid
                users[uid].referrals += 1
                users[uid].balance += 1  # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                users[uid].earned_from_refs += 1
                bot.send_message(uid, f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 1$")
                break
    
    if user_id not in users:
        users[user_id] = User(user_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[user_id].username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
    check_subscription(message)

def check_subscription(message):
    user_id = message.from_user.id
    user = users[user_id]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
    markup = types.InlineKeyboardMarkup()
    channel1_btn = types.InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª 1", url="https://t.me/+jm_KLvITBvQ2ZjEy")
    channel2_btn = types.InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª 2", url="https://t.me/+M96KUMSwXMViMjFk")
    check_btn = types.InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")
    markup.add(channel1_btn, channel2_btn)
    markup.add(check_btn)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(message.chat.id, 
                    "üî• <b>–î–û–°–¢–£–ü –ö SNOSER</b>\n\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–Ω–æ—Å–µ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n"
                    "üì¢ <b>–ö–∞–Ω–∞–ª 1</b> - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞\n"
                    "üì¢ <b>–ö–∞–Ω–∞–ª 2</b> - –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
                    "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è\"</b> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
                    "üíé <b>–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 1 –ë–ï–°–ü–õ–ê–¢–ù–´–ô —Å–Ω–æ—Å –Ω–∞ 40 –∞–∫–∫–∞—É–Ω—Ç–æ–≤!</b>",
                    parse_mode='HTML', 
                    reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'check_subscription')
def handle_check_subscription(call):
    user_id = call.from_user.id
    user = users[user_id]
    
    if user.pending_subscription_check:
        bot.answer_callback_query(call.id, "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
        return
    
    user.pending_subscription_check = True
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    msg = bot.send_message(call.message.chat.id, "‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É...</b>", parse_mode='HTML')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=check_subscription_thread, args=(user_id, msg.message_id, call.message.chat.id))
    thread.start()

def check_subscription_thread(user_id, message_id, chat_id):
    time.sleep(3)  # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    if user_id in users:
        users[user_id].pending_subscription_check = False
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –¥–∞–µ–º –¥–æ—Å—Ç—É–ø
        users[user_id].used_trial = True
        users[user_id].balance += 1
        
        try:
            bot.edit_message_text(
                "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                "üéâ –í–∞–º –≤—ã–¥–∞–Ω <b>1 –ë–ï–°–ü–õ–ê–¢–ù–´–ô —Å–Ω–æ—Å</b> –Ω–∞ 40 –∞–∫–∫–∞—É–Ω—Ç–æ–≤!\n\n"
                "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ —à–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–Ω–æ—Å–∞ –Ω–∏–∂–µ, —á–µ–º –≤ –ø–ª–∞—Ç–Ω–æ–º.\n"
                "–í –ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ 500 –∂–∞–ª–æ–± –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ!",
                chat_id,
                message_id,
                parse_mode='HTML'
            )
            time.sleep(2)
            show_main_menu(chat_id)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏

def show_main_menu(chat_id, text=None):
    if text is None:
        text = "üåê <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    btn2 = types.KeyboardButton("ü§ù –ü–æ–¥–ø–∏—Å–∫–∞")
    btn3 = types.KeyboardButton("üåÄ –°–Ω–æ—Å–µ—Ä")
    btn4 = types.KeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
    btn5 = types.KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
    btn6 = types.KeyboardButton("üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    
    bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = User(user_id)
    
    user = users[user_id]
    sub_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user.has_active_subscription() else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    bot_info = bot.get_me()
    bot_username = bot_info.username
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    text = f"""
<b>üë§ –í–ê–® –ü–†–û–§–ò–õ–¨</b>

<b>üÜî ID:</b> <code>{user_id}</code>
<b>üë§ Username:</b> @{user.username if user.username else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> <b>{user.balance}$</b>
<b>üîê –ü–æ–¥–ø–∏—Å–∫–∞:</b> {sub_status}
<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {user.referrals}
<b>üéØ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {user.earned_from_refs}$
<b>üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> 
<code>{user.get_referral_link(bot_username)}</code>
"""
    
    if user.has_active_subscription():
        remaining = user.subscription - datetime.datetime.now()
        text += f"\n<b>‚è∞ –û—Å—Ç–∞–ª–æ—Å—å:</b> {remaining.days} –¥–Ω, {remaining.seconds//3600} —á"
    
    markup = types.InlineKeyboardMarkup()
    withdraw_btn = types.InlineKeyboardButton("üí≥ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="withdraw")
    markup.add(withdraw_btn)
    
    bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üåÄ –°–Ω–æ—Å–µ—Ä")
def snoser(message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = User(user_id)
    
    user = users[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if not user.has_active_subscription() and user.balance < 1:
        bot.send_message(message.chat.id, 
                        "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç</b>\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–Ω–æ—Å–µ—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –±–∞–ª–∞–Ω—Å.\n\n"
                        "üíé <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –¥–æ—Å—Ç—É–ø–∞ –∫ 1 —Å–Ω–æ—Å—É</b>\n"
                        "–∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ <b>\"ü§ù –ü–æ–¥–ø–∏—Å–∫–∞\"</b>",
                        parse_mode='HTML')
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã
    markup = types.InlineKeyboardMarkup()
    for key, value in COMPLAINT_TYPES.items():
        markup.add(types.InlineKeyboardButton(value, callback_data=f"complaint_{key}"))
    
    bot.send_message(
        message.chat.id,
        "üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è:</b>\n\n"
        "‚Ä¢ <b>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> - —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ <b>–ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è</b> - —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö\n"
        "‚Ä¢ <b>–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</b> - –ø—Ä–æ–¥–∞–∂–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤/—Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ <b>–ù–∞—Å–∏–ª–∏–µ</b> - –ø—Ä–∏–∑—ã–≤—ã –∫ –Ω–∞—Å–∏–ª–∏—é, —É–≥—Ä–æ–∑—ã\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ù–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('complaint_'))
def handle_complaint_type(call):
    user_id = call.from_user.id
    complaint_type = call.data.split('_')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∂–∞–ª–æ–±—ã
    if user_id not in complaint_requests:
        complaint_requests[user_id] = {}
    
    complaint_requests[user_id]['type'] = complaint_type
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    
    # –ü—Ä–æ—Å–∏–º username –∏–ª–∏ —Å—Å—ã–ª–∫—É
    bot.send_message(
        call.message.chat.id,
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç/–∫–∞–Ω–∞–ª:</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ <code>@username</code>\n"
        "‚Ä¢ <code>https://t.me/username</code>\n"
        "‚Ä¢ <code>https://t.me/c/123456789/123</code>",
        parse_mode='HTML'
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    bot.register_next_step_handler(call.message, process_username_input)

def process_username_input(message):
    user_id = message.from_user.id
    
    if user_id not in complaint_requests:
        complaint_requests[user_id] = {}
    
    complaint_requests[user_id]['target'] = message.text
    
    # –ü—Ä–æ—Å–∏–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
    bot.send_message(
        message.chat.id,
        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞:</b>\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–æ–≤ —Ç–∏–ø–∞ @username_to_id_bot",
        parse_mode='HTML'
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    bot.register_next_step_handler(message, process_id_input)

def process_id_input(message):
    user_id = message.from_user.id
    
    if user_id not in complaint_requests:
        complaint_requests[user_id] = {}
    
    complaint_requests[user_id]['target_id'] = message.text
    
    # –ü—Ä–æ—Å–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    bot.send_message(
        message.chat.id,
        "üìé <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è:</b>\n\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫\n"
        "‚Ä¢ –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—á–∏–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>https://t.me/c/123456789/1</code>\n"
        "<code>https://t.me/c/123456789/2</code>",
        parse_mode='HTML'
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    bot.register_next_step_handler(message, process_links_input)

def process_links_input(message):
    user_id = message.from_user.id
    
    if user_id not in complaint_requests:
        complaint_requests[user_id] = {}
    
    complaint_requests[user_id]['violation_links'] = message.text.split('\n')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    user = users[user_id]
    is_paid = user.has_active_subscription()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–±
    complaint_count = 500 if is_paid else 40
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    complaint_type = COMPLAINT_TYPES.get(complaint_requests[user_id]['type'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    text = f"""
‚úÖ <b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!</b>

<b>–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è:</b> {complaint_type}
<b>–¶–µ–ª—å:</b> {complaint_requests[user_id]['target']}
<b>ID —Ü–µ–ª–∏:</b> {complaint_requests[user_id]['target_id']}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫:</b> {len(complaint_requests[user_id]['violation_links'])}
<b>–†–µ–∂–∏–º:</b> {'üíé –ü–õ–ê–ö–¢–ù–´–ô (500 –∂–∞–ª–æ–±)' if is_paid else 'üéÅ –ë–ï–°–ü–õ–ê–¢–ù–´–ô (40 –∂–∞–ª–æ–±)'}

<b>–°—Ç–∞—Ç—É—Å:</b> ‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...
"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    msg = bot.send_message(message.chat.id, text, parse_mode='HTML')
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
    time.sleep(2)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    success_count = complaint_count if is_paid else random.randint(30, 40)
    
    text += f"\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n<b>–ñ–∞–ª–æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {success_count}/{complaint_count}"
    
    bot.edit_message_text(
        text,
        message.chat.id,
        msg.message_id,
        parse_mode='HTML'
    )
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∫–∞
    if not is_paid:
        user.balance -= 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
def handle_admin_panel(call):
    user_id = call.from_user.id
    
    if user_id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    if call.data == "admin_view_payments":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã
        if not admin_panel_data["payment_screenshots"]:
            bot.answer_callback_query(call.id, "üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
            return
        
        text = "üìã <b>–û–∂–∏–¥–∞—é—â–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –æ–ø–ª–∞—Ç—ã:</b>\n\n"
        
        markup = types.InlineKeyboardMarkup()
        
        for payment_id, data in admin_panel_data["payment_screenshots"].items():
            user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['user_id']}"
            if data.get('username'):
                user_info += f" (@{data['username']})"
            
            text += f"‚Ä¢ <b>ID:</b> {payment_id}\n{user_info}\n<b>–°—É–º–º–∞:</b> {data['amount']}$\n\n"
            
            markup.add(types.InlineKeyboardButton(
                f"–ü—Ä–æ—Å–º–æ—Ç—Ä {payment_id}", 
                callback_data=f"admin_view_payment_{payment_id}"
            ))
        
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
        
        try:
            bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        except:
            pass
    
    elif call.data == "admin_grant_subscription":
        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É –ø–æ–¥–ø–∏—Å–∫–∏
        bot.send_message(
            call.message.chat.id,
            "üë§ <b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
            "–§–æ—Ä–º–∞—Ç: <code>123456789</code>",
            parse_mode='HTML'
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        bot.register_next_step_handler(call.message, process_grant_subscription)
    
    elif call.data.startswith("admin_view_payment_"):
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        payment_id = call.data.split('_')[-1]
        
        if payment_id in admin_panel_data["payment_screenshots"]:
            data = admin_panel_data["payment_screenshots"][payment_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            try:
                with open(data['file_path'], 'rb') as photo:
                    bot.send_photo(
                        call.message.chat.id,
                        photo,
                        caption=f"üì∏ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã</b>\n\n"
                               f"<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}\n"
                               f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {data['user_id']}\n"
                               f"<b>Username:</b> @{data.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                               f"<b>–°—É–º–º–∞:</b> {data['amount']}$\n"
                               f"<b>–¢–∏–ø:</b> {data.get('type', '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')}",
                        parse_mode='HTML'
                    )
            except:
                bot.send_message(
                    call.message.chat.id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç",
                    parse_mode='HTML'
                )
        else:
            bot.answer_callback_query(call.id, "‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

def process_grant_subscription(message):
    user_id = message.from_user.id
    
    try:
        target_id = int(message.text)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
        markup = types.InlineKeyboardMarkup()
        day_btn = types.InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data=f"admin_grant_1_day_{target_id}")
        week_btn = types.InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data=f"admin_grant_7_days_{target_id}")
        month_btn = types.InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data=f"admin_grant_1_month_{target_id}")
        forever_btn = types.InlineKeyboardButton("–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"admin_grant_forever_{target_id}")
        markup.add(day_btn, week_btn)
        markup.add(month_btn, forever_btn)
        
        bot.send_message(
            message.chat.id,
            f"üïê <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}:</b>",
            parse_mode='HTML',
            reply_markup=markup
        )
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_grant_'))
def handle_grant_subscription(call):
    user_id = call.from_user.id
    
    if user_id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    parts = call.data.split('_')
    duration = parts[2]  # day, days, month, forever
    target_id = int(parts[3])
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if target_id not in users:
        users[target_id] = User(target_id)
    
    # –í—ã–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    now = datetime.datetime.now()
    
    if duration == "day":
        users[target_id].subscription = now + datetime.timedelta(days=1)
    elif duration == "days":
        users[target_id].subscription = now + datetime.timedelta(days=7)
    elif duration == "month":
        users[target_id].subscription = now + datetime.timedelta(days=30)
    elif duration == "forever":
        users[target_id].subscription = datetime.datetime(2088, 12, 31)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    duration_text = {
        "day": "1 –¥–µ–Ω—å",
        "days": "7 –¥–Ω–µ–π",
        "month": "1 –º–µ—Å—è—Ü",
        "forever": "–ù–ê–í–°–ï–ì–î–ê (–¥–æ 2088)"
    }
    
    bot.send_message(
        call.message.chat.id,
        f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞!</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_id}\n"
        f"<b>–°—Ä–æ–∫:</b> {duration_text[duration]}\n"
        f"<b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {users[target_id].subscription.strftime('%Y-%m-%d %H:%M')}",
        parse_mode='HTML'
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    try:
        bot.send_message(
            target_id,
            f"üéâ <b>–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ JointBot\n"
            f"<b>–°—Ä–æ–∫:</b> {duration_text[duration]}\n"
            f"<b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {users[target_id].subscription.strftime('%Y-%m-%d %H:%M')}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞!",
            parse_mode='HTML'
        )
    except:
        pass  # –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã
@bot.message_handler(content_types=['photo'])
def handle_screenshot(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for payment_id, payment in payments.items():
        if payment["user_id"] == user_id and payment.get("waiting_for_screenshot", False):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            file_info = bot.get_file(message.photo[-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            file_path = os.path.join(SCREENSHOTS_DIR, f"{payment_id}.jpg")
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            admin_panel_data["payment_screenshots"][payment_id] = {
                "user_id": user_id,
                "username": message.from_user.username,
                "amount": payment["amount"],
                "type": payment.get("type", "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"),
                "file_path": file_path
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            payment["status"] = "processing"
            payment["waiting_for_screenshot"] = False
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(
                message.chat.id,
                "‚úÖ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!</b>\n\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç.\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @sevecid –∏–ª–∏ @officialamnesia",
                parse_mode='HTML'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            for admin_id in ADMIN_IDS:
                try:
                    bot.send_message(
                        admin_id,
                        f"üì∏ <b>–ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã!</b>\n\n"
                        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id} (@{message.from_user.username})\n"
                        f"<b>–°—É–º–º–∞:</b> {payment['amount']}$\n"
                        f"<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}",
                        parse_mode='HTML'
                    )
                except:
                    pass
            
            break

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("üî• –ë–æ—Ç JointBot –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)